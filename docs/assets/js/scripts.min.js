"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}!function(r){r.fn.swipe=function(e){var c=r.extend({cb:function(){console.log("swipe done")}},e);return this.each(function(){var t=r(this),n=0,o=0,i=!1,s=t.find(".slider"),a=t.find(".text");s.on("mousedown touchstart",function(e){i=!0,o=t.width()-r(this).width()+10,n=e.clientX||e.originalEvent.touches[0].pageX}),r(document.body,s).on("mouseup touchend",function(e){if(i){if(i=!1,(e.clientX||e.changedTouches[0].pageX)-n<o)return a.fadeTo(300,1),void s.animate({left:"-10px"},300);c.cb()}}),r(document.body).on("mousemove touchmove",function(e){var t;i&&(e=1-(t=(e.clientX||e.originalEvent.touches[0].pageX)-n)/o,a.fadeTo(0,e),t<=0?s.css({left:"-10px"}):o+10<=t?s.css({left:o+"px"}):s.css({left:t-10}))})})}}(jQuery);var request={auth:function(e,t){var n={Authorization:"Basic "+btoa("18h8vanvrh4pui1lrntc1niljf:1ge31bhjrdk9d0ja14mft8qepi4clkt805jqb2svqvmb4so1v4g7"),"Content-Type":"application/x-www-form-urlencoded",Cookie:"XSRF-TOKEN=b4a54f1b-afe5-4aee-9a76-00f920418b6e"};request.send("https://omm6oug5pg.execute-api.us-east-1.amazonaws.com/desarrollo/oauth2/v1/token","POST","grant_type=client_credentials",n,e,t)},pay:function(e,t,n,o,i){n=JSON.stringify(n);t.Authorization="Bearer "+e,request.send("https://apigateway.superappbaz.com/integracion/superapp/pagos/captacion/traspasos/v1/boton-pago","POST",n,t,o,i)},send:function(e,t,n,o,i,s){var a,c=new Headers;for(a in o)c.append(a,o[a]);fetch(e,{method:t,headers:c,body:n,redirect:"follow"}).then(function(e){return e.json()}).then(i).catch(s)}};function bind(o){$("[data-id]").each(function(){var e=$(this),t=e.data("id"),n=o[t];"precio"===t?e.html(formatAmount(n)):"saldo"===t?"false"===n&&setTimeout(function(){showAdvice(e,!0)},500):e.html(n)})}function bindFromStr(e){try{bind(JSON.parse(e))}catch(e){console.log(e)}}function changeScreen(e,t){$(".screen").addClass("no-visible"),e.removeClass("no-visible"),t()}function formatAmount(e){return"$ "+Number(e).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g,",")}function handleDigitKeyup(e){var t=e.target,n=e.keyCode,o=$(t.parentNode);8===n?0<o.prev().length&&((e=o.prev().find("input")).val(""),e.focus()):47<n&&n<58&&""!==t.value&&0<o.next().length&&o.next().find("input").focus(),validateCode()}function numberFilter(e){/^\d{0,1}$/.test(this.value)?(this.oldValue=this.value,this.oldSelectionStart=this.selectionStart,this.oldSelectionEnd=this.selectionEnd):this.hasOwnProperty("oldValue")?(this.value=this.oldValue,this.setSelectionRange(this.oldSelectionStart,this.oldSelectionEnd)):this.value=""}function fakeRequest(e,t){setTimeout(function(){t("000001"===e)},1500)}function payMovie(e){function t(e){e="object"===_typeof(e)?e.message:e,console.log(JSON.stringify({message:e})),"webkit"in window&&window.webkit.messageHandlers.errorPaymentResponse.postMessage("errorPaymentResponse|"+JSON.stringify(e))}try{var n=JSON.parse(e);request.auth(function(e){"string"==typeof e.access_token?request.pay(e.access_token,n.headers,n.transaccion,function(e){"webkit"in window&&window.webkit.messageHandlers.paymentResponse.postMessage("paymentResponse|"+JSON.stringify(e))},t):t(e)},t)}catch(e){t(e)}}function searchToJson(){for(var e,t=location.search.substring(1).split("&"),n={},o=0;o<t.length;o++)""!==t[o]&&(e=t[o].split("="),n[decodeURIComponent(e[0])]=decodeURIComponent(e[1]));return n}function showAdvice(e,t){t?e.addClass("no-visible"):e.removeClass("no-visible")}function showLoader(e){var t=$(".loader");e?(t.length<=0&&(t=$('<div class="loader">')),$("body").append(t),setTimeout(function(){return t.addClass("loader-visible")},10)):(t.removeClass("loader-visible"),setTimeout(function(){return t.remove()},375))}function validateCode(){var t=$(".auth-screen .code"),n=$(".auth-screen .digit input"),e="";n.each(function(){e+=this.value}),6===e.length?(showLoader(!0),fakeRequest(e,function(e){e?(t.addClass("valid"),changeScreen($(".resume-screen"),function(){showLoader(!1)})):(showLoader(!1),t.addClass("invalid"),setTimeout(function(){n.each(function(){$(this).val("")}),n.eq(0).focus()},100))})):t.removeClass("valid invalid")}bind(searchToJson());var $advices=$(".advice.fixed");$advices.each(function(){var e=$(this);e.find(".close-btn").on("click",function(){showAdvice(e,!1)})}),$(".detail-screen .swipe-btn").swipe({cb:function(){showLoader(!0),setTimeout(function(){console.log("scripts.js: Open digital sign"),"webkit"in window&&window.webkit.messageHandlers.showDigitalSign.postMessage("showDigitalSign")},500)}});var $digits=$(".auth-screen .digit input");$digits.on("keypress keydown keyup input change paste",numberFilter),$digits.on("keyup",handleDigitKeyup),$digits.eq(0).focus(),$(".screen header .close-btn").on("click",function(){console.log("scripts.js: Closing WebView"),"webkit"in window&&window.webkit.messageHandlers.closeMoviePayment.postMessage("closeMoviePayment")}),$(".share-btn").on("click",function(){console.log("scripts.js: Sharing ticket"),"webkit"in window&&window.webkit.messageHandlers.shareTicket.postMessage("shareTicket")}),$(".movie-btn").on("click",function(){console.log("scripts.js: Play movie"),"webkit"in window&&window.webkit.messageHandlers.playMovie.postMessage("playMovie")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

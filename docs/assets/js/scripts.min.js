"use strict";!function(r){r.fn.swipe=function(e){var c=r.extend({cb:function(){console.log("swipe done")}},e);return this.each(function(){var n=r(this),t=0,o=0,i=!1,s=n.find(".slider"),a=n.find(".text");s.on("mousedown touchstart",function(e){i=!0,o=n.width()-r(this).width()+10,t=e.clientX||e.originalEvent.touches[0].pageX}),r(document.body,s).on("mouseup touchend",function(e){if(i){if(i=!1,(e.clientX||e.changedTouches[0].pageX)-t<o)return a.fadeTo(300,1),void s.animate({left:"-10px"},300);c.cb()}}),r(document.body).on("mousemove touchmove",function(e){var n;i&&(e=1-(n=(e.clientX||e.originalEvent.touches[0].pageX)-t)/o,a.fadeTo(0,e),n<=0?s.css({left:"-10px"}):o+10<=n?s.css({left:o+"px"}):s.css({left:n-10}))})})}}(jQuery);var request={auth:function(e,n){var t={Authorization:"Basic "+btoa("18h8vanvrh4pui1lrntc1niljf:1ge31bhjrdk9d0ja14mft8qepi4clkt805jqb2svqvmb4so1v4g7"),"Content-Type":"application/x-www-form-urlencoded",Cookie:"XSRF-TOKEN=b4a54f1b-afe5-4aee-9a76-00f920418b6e"};request.send("https://omm6oug5pg.execute-api.us-east-1.amazonaws.com/desarrollo/oauth2/v1/token","POST","grant_type=client_credentials",t,e,n)},pay:function(e,n,t,o,i){t=JSON.stringify(t);n.Authorization="Bearer "+e,request.send("https://apigateway.superappbaz.com/integracion/superapp/pagos/captacion/traspasos/v1/boton-pago","POST",t,n,o,i)},send:function(e,n,t,o,i,s){var a,c=new Headers;for(a in o)c.append(a,o[a]);fetch(e,{method:n,headers:c,body:t,redirect:"follow"}).then(function(e){return e.json()}).then(i).catch(s)}};function bind(o){$("[data-id]").each(function(){var e=$(this),n=e.data("id"),t=o[n];"precio"===n?e.html(formatAmount(t)):"saldo"===n?"false"===t&&setTimeout(function(){showAdvice(e,!0)},500):e.html(t)})}function bindFromStr(e){try{bind(JSON.parse(e))}catch(e){console.log(e)}}function changeScreen(e,n){$(".screen").addClass("no-visible"),e.removeClass("no-visible"),n()}function formatAmount(e){return"$ "+Number(e).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g,",")}function handleDigitKeyup(e){var n=e.target,t=e.keyCode,o=$(n.parentNode);8===t?0<o.prev().length&&((e=o.prev().find("input")).val(""),e.focus()):47<t&&t<58&&""!==n.value&&0<o.next().length&&o.next().find("input").focus(),validateCode()}function numberFilter(e){/^\d{0,1}$/.test(this.value)?(this.oldValue=this.value,this.oldSelectionStart=this.selectionStart,this.oldSelectionEnd=this.selectionEnd):this.hasOwnProperty("oldValue")?(this.value=this.oldValue,this.setSelectionRange(this.oldSelectionStart,this.oldSelectionEnd)):this.value=""}function fakeRequest(e,n){setTimeout(function(){n("000001"===e)},1500)}function payMovie(e){function n(e){console.log(JSON.stringify(e)),"webkit"in window&&window.webkit.messageHandlers.errorPaymentResponse.postMessage("errorPaymentResponse|"+JSON.stringify(e))}try{var t=JSON.parse(e);request.auth(function(e){"string"==typeof e.access_token?request.pay(e.access_token,t.headers,t.requestBodyy,function(e){"201"==e.codigo?"webkit"in window&&window.webkit.messageHandlers.paymentResponse.postMessage("paymentResponse|"+JSON.stringify({error:{code:0,message:e.mensaje}})):n({error:{code:e.codigo,message:e.mensaje}})},function(e){n({error:{code:500,message:e.message}})}):n({error:{code:-1,message:e.mensaje}})},function(){n({error:{code:500,message:err.message}})})}catch(e){n(e)}}function searchToJson(){for(var e,n=location.search.substring(1).split("&"),t={},o=0;o<n.length;o++)""!==n[o]&&(e=n[o].split("="),t[decodeURIComponent(e[0])]=decodeURIComponent(e[1]));return t}function showAdvice(e,n){n?e.addClass("no-visible"):e.removeClass("no-visible")}function showLoader(e){var n=$(".loader");e?(n.length<=0&&(n=$('<div class="loader">')),$("body").append(n),setTimeout(function(){return n.addClass("loader-visible")},10)):(n.removeClass("loader-visible"),setTimeout(function(){return n.remove()},375))}function validateCode(){var n=$(".auth-screen .code"),t=$(".auth-screen .digit input"),e="";t.each(function(){e+=this.value}),6===e.length?(showLoader(!0),fakeRequest(e,function(e){e?(n.addClass("valid"),changeScreen($(".resume-screen"),function(){showLoader(!1)})):(showLoader(!1),n.addClass("invalid"),setTimeout(function(){t.each(function(){$(this).val("")}),t.eq(0).focus()},100))})):n.removeClass("valid invalid")}bind(searchToJson());var $advices=$(".advice.fixed");$advices.each(function(){var e=$(this);e.find(".close-btn").on("click",function(){showAdvice(e,!1)})}),$(".detail-screen .swipe-btn").swipe({cb:function(){showLoader(!0),setTimeout(function(){console.log("scripts.js: Open digital sign"),"webkit"in window&&window.webkit.messageHandlers.showDigitalSign.postMessage("showDigitalSign")},500)}});var $digits=$(".auth-screen .digit input");$digits.on("keypress keydown keyup input change paste",numberFilter),$digits.on("keyup",handleDigitKeyup),$digits.eq(0).focus(),$(".screen header .close-btn").on("click",function(){console.log("scripts.js: Closing WebView"),"webkit"in window&&window.webkit.messageHandlers.closeMoviePayment.postMessage("closeMoviePayment")}),$(".share-btn").on("click",function(){console.log("scripts.js: Sharing ticket"),"webkit"in window&&window.webkit.messageHandlers.shareTicket.postMessage("shareTicket")}),$(".movie-btn").on("click",function(){console.log("scripts.js: Play movie"),"webkit"in window&&window.webkit.messageHandlers.playMovie.postMessage("playMovie")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

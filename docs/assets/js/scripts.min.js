"use strict";function _typeof(e){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}function bind(o){$("[data-id]").each(function(){var e=$(this),t=e.data("id"),n=o[t];"precio"===t?e.html(formatAmount(n)):"saldo"===t?"false"===n&&setTimeout(function(){showAdvice(e,!0)},500):e.html(n)})}function changeScreen(e,t){$(".screen").addClass("no-visible"),e.removeClass("no-visible"),t()}function formatAmount(e){return"$ "+Number(e).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g,",")}function handleDigitKeyup(e){var t=e.target,n=e.keyCode,o=$(t.parentNode);8===n?0<o.prev().length&&((e=o.prev().find("input")).val(""),e.focus()):47<n&&n<58&&""!==t.value&&0<o.next().length&&o.next().find("input").focus(),validateCode()}function numberFilter(e){/^\d{0,1}$/.test(this.value)?(this.oldValue=this.value,this.oldSelectionStart=this.selectionStart,this.oldSelectionEnd=this.selectionEnd):this.hasOwnProperty("oldValue")?(this.value=this.oldValue,this.setSelectionRange(this.oldSelectionStart,this.oldSelectionEnd)):this.value=""}function request(e,t,n,o,i){var s=new Headers;s.append("Authorization","Basic "+btoa("18h8vanvrh4pui1lrntc1niljf:1ge31bhjrdk9d0ja14mft8qepi4clkt805jqb2svqvmb4so1v4g7")),s.append("Content-Type","application/x-www-form-urlencoded"),s.append("Cookie","XSRF-TOKEN=b4a54f1b-afe5-4aee-9a76-00f920418b6e"),fetch("https://omm6oug5pg.execute-api.us-east-1.amazonaws.com/desarrollo/oauth2/v1/token",{method:"POST",headers:s,body:"grant_type=client_credentials",redirect:"follow"}).then(function(e){return e.text()}).then(function(e){return console.log(e)}).catch(function(e){return console.log("error",e)})}function fakeRequest(e,t){setTimeout(function(){t("000001"===e)},1500)}function searchToJson(){for(var e,t=location.search.substring(1).split("&"),n={},o=0;o<t.length;o++)""!==t[o]&&(e=t[o].split("="),n[decodeURIComponent(e[0])]=decodeURIComponent(e[1]));return n}function showAdvice(e,t){t?e.addClass("no-visible"):e.removeClass("no-visible")}function showLoader(e){var t=$(".loader");e?(t.length<=0&&(t=$('<div class="loader">')),$("body").append(t),setTimeout(function(){return t.addClass("loader-visible")},10)):(t.removeClass("loader-visible"),setTimeout(function(){return t.remove()},375))}function validateCode(){var t=$(".auth-screen .code"),n=$(".auth-screen .digit input"),e="";n.each(function(){e+=this.value}),6===e.length?(showLoader(!0),fakeRequest(e,function(e){e?(t.addClass("valid"),changeScreen($(".resume-screen"),function(){showLoader(!1)})):(showLoader(!1),t.addClass("invalid"),setTimeout(function(){n.each(function(){$(this).val("")}),n.eq(0).focus()},100))})):t.removeClass("valid invalid")}!function(d){d.fn.swipe=function(e){var a=d.extend({cb:function(){console.log("swipe done")}},e);return this.each(function(){var t=d(this),n=0,o=0,i=!1,s=t.find(".slider"),c=t.find(".text");s.on("mousedown touchstart",function(e){i=!0,o=t.width()-d(this).width()+10,n=e.clientX||e.originalEvent.touches[0].pageX}),d(document.body,s).on("mouseup touchend",function(e){if(i){if(i=!1,(e.clientX||e.changedTouches[0].pageX)-n<o)return c.fadeTo(300,1),void s.animate({left:"-10px"},300);a.cb()}}),d(document.body).on("mousemove touchmove",function(e){var t;i&&(e=1-(t=(e.clientX||e.originalEvent.touches[0].pageX)-n)/o,c.fadeTo(0,e),t<=0?s.css({left:"-10px"}):o+10<=t?s.css({left:o+"px"}):s.css({left:t-10}))})})}}(jQuery),bind(searchToJson());var $advices=$(".advice.fixed");$advices.each(function(){var e=$(this);e.find(".close-btn").on("click",function(){showAdvice(e,!1)})}),$(".detail-screen .swipe-btn").swipe({cb:function(){showLoader(!0),setTimeout(function(){console.log("scripts.js: Open digital sign"),"function"!=typeof showDigitalSign&&"object"!==("undefined"==typeof showDigitalSign?"undefined":_typeof(showDigitalSign))||showDigitalSign(function(e){e?($code.addClass("valid"),changeScreen($(".resume-screen"),function(){showLoader(!1)})):(showLoader(!1),$code.addClass("invalid"),setTimeout(function(){$digits.each(function(){$(this).val("")}),$digits.eq(0).focus()},100))})},500)}});var $digits=$(".auth-screen .digit input");$digits.on("keypress keydown keyup input change paste",numberFilter),$digits.on("keyup",handleDigitKeyup),$digits.eq(0).focus(),$(".screen header .close-btn").on("click",function(){console.log("scripts.js: Closing WebView"),$(".detail-screen main").prepend("typeof closeMoviePayment"+("undefined"==typeof closeMoviePayment?"undefined":_typeof(closeMoviePayment))),"function"!=typeof closeMoviePayment&&"object"!==("undefined"==typeof closeMoviePayment?"undefined":_typeof(closeMoviePayment))||closeMoviePayment()}),$(".share-btn").on("click",function(){console.log("scripts.js: Sharing ticket"),"function"!=typeof shareTicket&&"object"!==("undefined"==typeof shareTicket?"undefined":_typeof(shareTicket))||shareTicket()}),$(".movie-btn").on("click",function(){console.log("scripts.js: Play movie"),"function"!=typeof playMovie&&"object"!==("undefined"==typeof playMovie?"undefined":_typeof(playMovie))||playMovie()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

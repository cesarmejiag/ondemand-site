"use strict";function addListener(t,e,n){function i(e,t,n){e.split(" ").forEach(function(e){return t.addEventListener(e,n)})}e instanceof NodeList?[].forEach.call(e,function(e){return i(t,e,n)}):i(t,e,n)}function bind(i){var e=qa("[data-id]");[].forEach.call(e,function(e){var t=e.dataset.id,n=i[t];"precio"===t?e.innerHTML=formatAmount(n):"saldo"===t?"false"===n&&setTimeout(function(){showAdvice(e,!0)},500):e.innerHTML=n})}function formatAmount(e){return"$ "+Number(e).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g,",")}function handleDigitKeyup(e){var t=e.target,n=e.keyCode,i=t.parentNode;8===n?(e=i.previousElementSibling)&&((e=q("input",e)).value="",e.focus()):47<n&&n<58&&(""===t.value||(i=i.nextElementSibling)&&q("input",i).focus()),validateCode()}function numberFilter(e){/^\d{0,1}$/.test(this.value)?(this.oldValue=this.value,this.oldSelectionStart=this.selectionStart,this.oldSelectionEnd=this.selectionEnd):this.hasOwnProperty("oldValue")?(this.value=this.oldValue,this.setSelectionRange(this.oldSelectionStart,this.oldSelectionEnd)):this.value=""}function searchToJson(){for(var e,t=location.search.substring(1).split("&"),n={},i=0;i<t.length;i++)""!==t[i]&&(e=t[i].split("="),n[decodeURIComponent(e[0])]=decodeURIComponent(e[1]));return n}function showAdvice(e,t){t?e.classList.remove("no-visible"):e.classList.add("no-visible")}function q(e,t){return(t||document).querySelector(e)}function qa(e,t){return(t||document).querySelectorAll(e)}function validateCode(){var e=q(".auth-screen .code"),t=qa(".auth-screen .digit input"),n="";[].forEach.call(t,function(e){n+=e.value}),6===n.length&&("000001"===n?e.classList.add("valid"):e.classList.add("invalid"))}var advices,digits;!function(d){d.fn.swipe=function(e){var s=d.extend({cb:function(){console.log("swipe done")}},e);return this.each(function(){var t=d(this),n=0,i=0,o=!1,a=t.find(".slider"),c=t.find(".text");a.on("mousedown touchstart",function(e){o=!0,i=t.width()-d(this).width()+10,n=e.clientX||e.originalEvent.touches[0].pageX}),d(document.body,a).on("mouseup touchend",function(e){if(o){if(o=!1,(e.clientX||e.changedTouches[0].pageX)-n<i)return c.fadeTo(300,1),void a.animate({left:"-10px"},300);s.cb()}}),d(document.body).on("mousemove touchmove",function(e){var t;o&&(e=1-(t=(e.clientX||e.originalEvent.touches[0].pageX)-n)/i,c.fadeTo(0,e),t<=0?a.css({left:"-10px"}):i+10<=t?a.css({left:i+"px"}):a.css({left:t-10}))})})}}(jQuery),0<=location.pathname.indexOf("detail")?(advices=qa(".advice.fixed"),[].forEach.call(advices,function(e){addListener("click",q(".close-btn",e),function(){showAdvice(e,!1)})}),$(".swipe-btn").swipe({cb:function(){console.log("swipe from detail")}}),bind(searchToJson())):0<=location.pathname.indexOf("auth")&&(addListener("keypress keydown keyup input change paste",digits=qa(".auth-screen .digit input"),numberFilter),addListener("keyup",digits,handleDigitKeyup),digits[0].focus());
//# sourceMappingURL=data:application/json;charset=utf8;base64,

"use strict";function bind(i){$("[data-id]").each(function(){var e=$(this),n=e.data("id"),t=i[n];"precio"===n?e.html(formatAmount(t)):"saldo"===n?"false"===t&&setTimeout(function(){showAdvice(e,!0)},500):e.html(t)})}function bindFromStr(e){try{bind(JSON.parse(e))}catch(e){console.log(e)}}function changeScreen(e,n){$(".screen").addClass("no-visible"),e.removeClass("no-visible"),n()}function formatAmount(e){return"$ "+Number(e).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g,",")}function handleDigitKeyup(e){var n=e.target,t=e.keyCode,i=$(n.parentNode);8===t?0<i.prev().length&&((e=i.prev().find("input")).val(""),e.focus()):47<t&&t<58&&""!==n.value&&0<i.next().length&&i.next().find("input").focus(),validateCode()}function numberFilter(e){/^\d{0,1}$/.test(this.value)?(this.oldValue=this.value,this.oldSelectionStart=this.selectionStart,this.oldSelectionEnd=this.selectionEnd):this.hasOwnProperty("oldValue")?(this.value=this.oldValue,this.setSelectionRange(this.oldSelectionStart,this.oldSelectionEnd)):this.value=""}function request(e,n,t,i,o){var s=new Headers;s.append("Authorization","Basic "+btoa("18h8vanvrh4pui1lrntc1niljf:1ge31bhjrdk9d0ja14mft8qepi4clkt805jqb2svqvmb4so1v4g7")),s.append("Content-Type","application/x-www-form-urlencoded"),s.append("Cookie","XSRF-TOKEN=b4a54f1b-afe5-4aee-9a76-00f920418b6e"),fetch("https://omm6oug5pg.execute-api.us-east-1.amazonaws.com/desarrollo/oauth2/v1/token",{method:"POST",headers:s,body:"grant_type=client_credentials",redirect:"follow"}).then(function(e){return e.text()}).then(function(e){return console.log(e)}).catch(function(e){return console.log("error",e)})}function fakeRequest(e,n){setTimeout(function(){n("000001"===e)},1500)}function searchToJson(){for(var e,n=location.search.substring(1).split("&"),t={},i=0;i<n.length;i++)""!==n[i]&&(e=n[i].split("="),t[decodeURIComponent(e[0])]=decodeURIComponent(e[1]));return t}function showAdvice(e,n){n?e.addClass("no-visible"):e.removeClass("no-visible")}function showLoader(e){var n=$(".loader");e?(n.length<=0&&(n=$('<div class="loader">')),$("body").append(n),setTimeout(function(){return n.addClass("loader-visible")},10)):(n.removeClass("loader-visible"),setTimeout(function(){return n.remove()},375))}function validateCode(){var n=$(".auth-screen .code"),t=$(".auth-screen .digit input"),e="";t.each(function(){e+=this.value}),6===e.length?(showLoader(!0),fakeRequest(e,function(e){e?(n.addClass("valid"),changeScreen($(".resume-screen"),function(){showLoader(!1)})):(showLoader(!1),n.addClass("invalid"),setTimeout(function(){t.each(function(){$(this).val("")}),t.eq(0).focus()},100))})):n.removeClass("valid invalid")}!function(d){d.fn.swipe=function(e){var c=d.extend({cb:function(){console.log("swipe done")}},e);return this.each(function(){var n=d(this),t=0,i=0,o=!1,s=n.find(".slider"),a=n.find(".text");s.on("mousedown touchstart",function(e){o=!0,i=n.width()-d(this).width()+10,t=e.clientX||e.originalEvent.touches[0].pageX}),d(document.body,s).on("mouseup touchend",function(e){if(o){if(o=!1,(e.clientX||e.changedTouches[0].pageX)-t<i)return a.fadeTo(300,1),void s.animate({left:"-10px"},300);c.cb()}}),d(document.body).on("mousemove touchmove",function(e){var n;o&&(e=1-(n=(e.clientX||e.originalEvent.touches[0].pageX)-t)/i,a.fadeTo(0,e),n<=0?s.css({left:"-10px"}):i+10<=n?s.css({left:i+"px"}):s.css({left:n-10}))})})}}(jQuery),bind(searchToJson());var $advices=$(".advice.fixed");$advices.each(function(){var e=$(this);e.find(".close-btn").on("click",function(){showAdvice(e,!1)})}),$(".detail-screen .swipe-btn").swipe({cb:function(){showLoader(!0),setTimeout(function(){console.log("scripts.js: Open digital sign"),"webkit"in window&&window.webkit.messageHandlers.showDigitalSign.postMessage("showDigitalSign")},500)}});var $digits=$(".auth-screen .digit input");$digits.on("keypress keydown keyup input change paste",numberFilter),$digits.on("keyup",handleDigitKeyup),$digits.eq(0).focus(),$(".screen header .close-btn").on("click",function(){console.log("scripts.js: Closing WebView"),"webkit"in window&&window.webkit.messageHandlers.closeMoviePayment.postMessage("closeMoviePayment")}),$(".share-btn").on("click",function(){console.log("scripts.js: Sharing ticket"),"webkit"in window&&window.webkit.messageHandlers.shareTicket.postMessage("shareTicket")}),$(".movie-btn").on("click",function(){console.log("scripts.js: Play movie"),"webkit"in window&&window.webkit.messageHandlers.playMovie.postMessage("playMovie")});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
